// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: service/task/interface/proto/service.proto

package proto

import (
	fmt "fmt"
	math "math"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/wrappers"

	context "context"

	api "github.com/micro/go-micro/v2/api"

	client "github.com/micro/go-micro/v2/client"

	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Task service

func NewTaskEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Task service

type TaskService interface {
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
}

type taskService struct {
	c    client.Client
	name string
}

func NewTaskService(name string, c client.Client) TaskService {
	return &taskService{
		c:    c,
		name: name,
	}
}

func (c *taskService) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.name, "Task.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Task service

type TaskHandler interface {
	Create(context.Context, *CreateRequest, *CreateResponse) error
}

func RegisterTaskHandler(s server.Server, hdlr TaskHandler, opts ...server.HandlerOption) error {
	type task interface {
		Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error
	}
	type Task struct {
		task
	}
	h := &taskHandler{hdlr}
	return s.Handle(s.NewHandler(&Task{h}, opts...))
}

type taskHandler struct {
	TaskHandler
}

func (h *taskHandler) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.TaskHandler.Create(ctx, in, out)
}
